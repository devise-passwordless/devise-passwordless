name: test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ruby-version:
          - 3.3
          - 3.2
          - 3.1
          - "3.0"
          - 2.7
        rails-version:
          # - "edge"
          - "8.0"
          - 7.1
          - "7.0"
          - 6.1
        exclude:
          # Rails 8 requires Ruby 3.2.0 or newer
          - ruby-version: 3.1
            rails-version: "8.0"
          - ruby-version: 3.0
            rails-version: "8.0"
          - ruby-version: 2.7
            rails-version: "8.0"
          # Rails 7.0 and 7.1 requires Ruby 2.7.0 or newer
          # Rails 6 requires Ruby <= 3.0
          - ruby-version: 3.2
            rails-version: 6.1
          - ruby-version: 3.1
            rails-version: 6.1
          - ruby-version: 3.3
            rails-version: 6.1
    steps:
      - uses: actions/checkout@v4
      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          rubygems: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Run gem tests
        run: |
          bundle config set --local path ".$(mktemp -u -d)"
          bundle
          bundle exec rake
      - name: Set up new Rails dummy app
        working-directory: ./spec
        env:
          BUNDLE_GEMFILE: dummy_app_config/gemfiles/Gemfile-rails-${{ matrix.rails-version }}
        run: |

          # Install Rails
          # Create a 
          # BUNDLE_GEMFILE points bundler to the correct Gemfile
          bundle config set --local path ".$(mktemp -u -d)"
          bundle

          # Create a new dummy_app
          # `bundle exec` is required to ensure bundler uses the gem specifications in BUNDLE_GEMFILE
          # This fixes a bug where a previous test run may install a different Rails version which
          # bundler will use.
          # We skip running bundle install. This fixes a different bug where `rails new` will fail in 
          # some versions of Rails (e.g. 7.0.8.7) due to a bug in an ActiveSupport dependency, 
          # concurrent-ruby. This is fixed in Rails 7.1, but persists in the latest releases of 7.0.
          bundle exec rails new dummy_app --database=sqlite3 --skip-active-storage --skip-action-cable --skip-spring --skip-listen --skip-test --skip-bundle --skip-git

          # XXX VERY DUMB workaround for Rails 7's "rails new" default Gemfile not working with Ruby 2.7
          # e.g. https://github.com/devise-passwordless/devise-passwordless/actions/runs/8132843679/job/22223730812#step:7:292
          # SUPPOSEDLY Rails 7 supports Ruby 2.7 but the "debug" gem dependency pulls in a "sqlite3" version which is
          # incompatible with Ruby 2.7
          if [[ "${{ matrix.ruby-version }}" == "2.7" && "${{ matrix.rails-version }}" == "7" ]]; then
            sed -i '/^gem.*sqlite3/d' dummy_app/Gemfile
            echo -e "\ngem 'sqlite3', '~> 1.6.0', '>= 1.6.9'\n" >> dummy_app/Gemfile
          fi

          # Copy project gems into the dummy_app
          cat dummy_app_config/Gemfile.append >> dummy_app/Gemfile

          # Unset BUNDLE_GEMFILE so that bundler now uses the Gemfile in our dummy_app
          unset BUNDLE_GEMFILE
          cd dummy_app

          bundle
          bundle exec rails g rspec:install --force
          cp -rf ../dummy_app_config/shared_source/all/* ./
          cp -rf ../dummy_app_config/shared_source/${{ matrix.rails-version }}/* ./

          # Install Yarn globally so that Rails bin/setup command can find Yarn, if needed.
          npm install --global yarn
          yarn install
      - name: Run Rails dummy app tests
        working-directory: ./spec/dummy_app
        run: |
          rake db:drop db:create db:migrate
          rake
